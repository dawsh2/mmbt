# Event-Driven Architecture Implementation Plan

This document outlines the step-by-step process for standardizing the event-driven implementation throughout the trading system codebase. The goal is to ensure consistent use of proper event objects rather than dictionaries and to maintain a clean, type-safe event flow between all components.

## 1. Core Event System Changes (Completed)

- [x] Moved base `Event` class to `event_base.py` to resolve circular imports
- [x] Updated `event_emitters.py` to enforce proper event objects
- [x] Enhanced validation and metrics collection
- [x] Improved error handling with centralized `ErrorHandler`

## 2. Component Integration Plan

### 2.1 Data Module

#### DataHandler Class
- [ ] Update `emit_bar` method to create and use `BarEvent` objects
- [ ] Remove any dictionary-based event creation
- [ ] Add event validation for market data events

```python
# Before
def process_bar(self, bar_data):
    # Create dictionary
    bar_dict = {
        'symbol': bar_data.get('symbol', self.default_symbol),
        'timestamp': bar_data.get('timestamp', datetime.datetime.now()),
        # Other bar data...
    }
    self.event_bus.emit(EventType.BAR, bar_dict)

# After
def process_bar(self, bar_data):
    # Create proper BarEvent
    bar_event = BarEvent(bar_data)
    self.event_bus.emit(EventType.BAR, bar_event)
```

### 2.2 Strategy Module

#### Strategy Base Class
- [ ] Update `on_bar` method to expect `BarEvent` objects
- [ ] Update `generate_signal` method to create `SignalEvent` objects
- [ ] Implement proper type checking

```python
# Before
def on_bar(self, event):
    bar_data = event.data  # Potentially a dictionary
    # Process bar...
    signal = {
        'symbol': bar_data.get('symbol'),
        'signal_type': signal_type,
        'price': bar_data.get('Close'),
        # Other signal data...
    }
    self.event_bus.emit(EventType.SIGNAL, signal)

# After
def on_bar(self, event):
    if not isinstance(event.data, BarEvent):
        raise TypeError(f"Expected BarEvent, got {type(event.data)}")
    
    bar_event = event.data
    # Process bar...
    signal = SignalEvent(
        signal_value=signal_type.value,
        price=bar_event.get_price(),
        symbol=bar_event.get_symbol(),
        rule_id=self.name,
        confidence=confidence
    )
    signal_emitter = SignalEmitter(self.event_bus)
    signal_emitter.emit_signal(signal)
```

### 2.3 Rules Module

#### Rule Base Class
- [ ] Update to use `BarEvent` objects
- [ ] Create properly typed `SignalEvent` objects
- [ ] Add validation for signal creation

```python
# Before
def on_bar(self, event):
    # Process bar data...
    if self.should_generate_signal():
        signal = {
            'rule_id': self.name,
            'signal_type': signal_type,
            # Other signal data...
        }
        return signal
    return None

# After
def on_bar(self, event):
    # Extract BarEvent correctly
    if isinstance(event, Event) and isinstance(event.data, BarEvent):
        bar_event = event.data
    elif isinstance(event, BarEvent):
        bar_event = event
    else:
        raise TypeError(f"Expected Event with BarEvent data or BarEvent, got {type(event)}")
    
    # Process bar data...
    if self.should_generate_signal():
        return SignalEvent(
            signal_value=signal_type.value,
            price=bar_event.get_price(),
            symbol=bar_event.get_symbol(),
            rule_id=self.name,
            confidence=confidence,
            metadata=metadata
        )
    return None
```

### 2.4 Position Management

#### PositionManager Class
- [ ] Update `on_signal` method to expect `SignalEvent` objects
- [ ] Create properly typed `OrderEvent` objects
- [ ] Implement validation for position actions

```python
# Before
def on_signal(self, signal_dict):
    # Process signal dictionary...
    order = {
        'symbol': signal_dict.get('symbol'),
        'direction': signal_dict.get('signal_type'),
        'quantity': quantity,
        # Other order data...
    }
    self.event_bus.emit(EventType.ORDER, order)

# After
def on_signal(self, signal):
    if not isinstance(signal, SignalEvent):
        raise TypeError(f"Expected SignalEvent, got {type(signal)}")
    
    # Process signal...
    from src.events.order_events import OrderEvent
    
    order = OrderEvent(
        symbol=signal.get_symbol(),
        direction=signal.get_signal_value(),
        quantity=quantity,
        price=signal.get_price(),
        timestamp=signal.timestamp
    )
    
    order_emitter = OrderEmitter(self.event_bus)
    order_emitter.emit_order(order)
```

### 2.5 Execution Module

#### ExecutionEngine Class
- [ ] Update `on_order` method to expect `OrderEvent` objects
- [ ] Create properly typed `FillEvent` objects
- [ ] Add validation for order execution

```python
# Before
def on_order(self, event):
    order_dict = event.data  # Dictionary
    # Process order...
    fill = {
        'symbol': order_dict.get('symbol'),
        'quantity': order_dict.get('quantity'),
        # Other fill data...
    }
    self.event_bus.emit(EventType.FILL, fill)

# After
def on_order(self, event):
    if not isinstance(event.data, OrderEvent):
        raise TypeError(f"Expected OrderEvent, got {type(event.data)}")
    
    order = event.data
    # Process order...
    from src.events.order_events import FillEvent
    
    fill = FillEvent(
        symbol=order.symbol,
        quantity=order.quantity,
        price=execution_price,
        direction=order.direction,
        timestamp=datetime.datetime.now(),
        order_id=order.order_id
    )
    
    fill_emitter = FillEmitter(self.event_bus)
    fill_emitter.emit_fill(fill)
```

### 2.6 Portfolio Module

#### Portfolio Class
- [ ] Update `on_fill` method to expect `FillEvent` objects
- [ ] Create properly typed position events
- [ ] Implement validation for portfolio updates

```python
# Before
def on_fill(self, fill_dict):
    # Process fill...
    position_data = {
        'position_id': position_id,
        'symbol': fill_dict.get('symbol'),
        # Other position data...
    }
    self.event_bus.emit(EventType.POSITION_OPENED, position_data)

# After
def on_fill(self, fill):
    if not isinstance(fill, FillEvent):
        raise TypeError(f"Expected FillEvent, got {type(fill)}")
    
    # Process fill...
    position_data = {
        'position_id': position_id,
        'symbol': fill.symbol,
        'direction': fill.direction,
        'quantity': fill.quantity,
        'entry_price': fill.price,
        'timestamp': fill.timestamp
    }
    
    position_event = PositionOpenedEvent(position_data)
    portfolio_emitter = PortfolioEmitter(self.event_bus)
    portfolio_emitter.emit_position_opened(position_event)
```

## 3. Event Manager Updates

- [ ] Update `EventManager.process_market_data` to use proper `BarEvent` objects
- [ ] Update all event handler methods to work with proper event objects
- [ ] Add type checking to prevent dictionary usage

```python
# Before
def _create_signal_handler(self):
    def handle_signal_event(event):
        signal = event.data
        # Convert to dictionary
        signal_dict = {
            'symbol': signal.symbol if hasattr(signal, 'symbol') else "SYNTHETIC",
            # Other conversions...
        }
        self.signal_history.append(signal_dict)
        self.position_manager.on_signal(signal_dict)

# After
def _create_signal_handler(self):
    def handle_signal_event(event):
        signal = event.data
        if not isinstance(signal, SignalEvent):
            raise TypeError(f"Expected SignalEvent, got {type(signal)}")
            
        # Store signal directly
        self.signal_history.append(signal)
        # Pass signal object directly
        self.position_manager.on_signal(signal)
```

## 4. Event Classes to Create

### 4.1 Order Events

Create an `order_events.py` file with the following classes:

```python
"""Order event classes for the trading system."""

from datetime import datetime
from typing import Dict, Any, Optional

from src.events.event_base import Event
from src.events.event_types import EventType

class OrderEvent(Event):
    """Event for order instructions."""
    
    def __init__(self, symbol, direction, quantity, order_type="MARKET", 
                 price=None, order_id=None, timestamp=None):
        data = {
            'symbol': symbol,
            'direction': direction,
            'quantity': quantity,
            'order_type': order_type,
            'price': price,
            'order_id': order_id or str(uuid.uuid4())
        }
        super().__init__(EventType.ORDER, data, timestamp)
        
    # Add accessor methods...

class CancelOrderEvent(Event):
    """Event for order cancellation."""
    
    def __init__(self, order_id, timestamp=None):
        data = {'order_id': order_id}
        super().__init__(EventType.CANCEL, data, timestamp)
        
    # Add accessor methods...

class ModifyOrderEvent(Event):
    """Event for order modification."""
    
    def __init__(self, order_id, changes, timestamp=None):
        data = {
            'order_id': order_id,
            'changes': changes
        }
        super().__init__(EventType.MODIFY, data, timestamp)
        
    # Add accessor methods...

class FillEvent(Event):
    """Event for order fills."""
    
    def __init__(self, symbol, quantity, price, direction, 
                 timestamp=None, order_id=None, transaction_cost=0.0):
        data = {
            'symbol': symbol,
            'quantity': quantity,
            'price': price,
            'direction': direction,
            'order_id': order_id,
            'transaction_cost': transaction_cost
        }
        super().__init__(EventType.FILL, data, timestamp)
        
    # Add accessor methods...

class PartialFillEvent(FillEvent):
    """Event for partial order fills."""
    
    def __init__(self, symbol, quantity, price, direction, 
                 remaining_quantity, timestamp=None, order_id=None, 
                 transaction_cost=0.0):
        super().__init__(symbol, quantity, price, direction, 
                        timestamp, order_id, transaction_cost)
        self.data['remaining_quantity'] = remaining_quantity
        self.event_type = EventType.PARTIAL_FILL
        
    # Add accessor methods...

class RejectEvent(Event):
    """Event for order rejections."""
    
    def __init__(self, order_id, reason, timestamp=None):
        data = {
            'order_id': order_id,
            'reason': reason
        }
        super().__init__(EventType.REJECT, data, timestamp)
        
    # Add accessor methods...
```

### 4.2 System Events

Create a `system_events.py` file with the following classes:

```python
"""System event classes for the trading system."""

from datetime import datetime
from typing import Dict, Any, Optional

from src.events.event_base import Event
from src.events.event_types import EventType

class StartEvent(Event):
    """Event for system startup."""
    
    def __init__(self, config=None, timestamp=None):
        data = {'config': config or {}}
        super().__init__(EventType.START, data, timestamp)
        
    # Add accessor methods...

class StopEvent(Event):
    """Event for system shutdown."""
    
    def __init__(self, reason=None, emergency=False, timestamp=None):
        data = {
            'reason': reason,
            'emergency': emergency
        }
        super().__init__(EventType.STOP, data, timestamp)
        
    # Add accessor methods...

class ErrorEvent(Event):
    """Event for system errors."""
    
    def __init__(self, source, message, error_type=None, 
                original_event=None, timestamp=None):
        data = {
            'source': source,
            'message': str(message),
            'error_type': error_type or type(message).__name__
        }
        
        if original_event:
            data['original_event_id'] = original_event.id
            data['original_event_type'] = original_event.event_type.name
            
        super().__init__(EventType.ERROR, data, timestamp)
        
    # Add accessor methods...
```

## 5. Testing Strategy

### 5.1 Unit Tests
- [ ] Create tests for each event type
- [ ] Test type checking in emitters
- [ ] Verify event flow through handlers

### 5.2 Integration Tests
- [ ] Test event flow from data to fills
- [ ] Verify proper object usage across components
- [ ] Test error handling with invalid events

### 5.3 E2E Tests
- [ ] Run backtests with complete system
- [ ] Verify events are processed correctly end-to-end
- [ ] Check metrics and error tracking

## 6. Implementation Checklist

- [ ] Create missing event classes
- [ ] Update data module
- [ ] Update strategy module
- [ ] Update rules module
- [ ] Update position management module
- [ ] Update execution module
- [ ] Update portfolio module
- [ ] Update event manager
- [ ] Create unit tests
- [ ] Create integration tests
- [ ] Run E2E tests
- [ ] Update documentation

## 7. Migration Tips

1. **Start with core types**: Implement the most common event types first (BAR, SIGNAL, ORDER, FILL)
2. **Follow the event flow**: Update components in the order of the event flow
3. **Use type assertions**: Add assertions to catch dictionary usage during development
4. **Add detailed logging**: Log event object types to track correct usage
5. **Create factory methods**: Add helper methods to create standard event objects
6. **Use common interfaces**: Ensure all event objects have consistent method names

## 8. Deployment Strategy

1. **Development environment**: Implement and test changes in dev environment
2. **Staging environment**: Deploy to staging for integration testing
3. **Production**: Roll out changes with feature flags for safety
4. **Monitoring**: Track key metrics (event counts, errors, performance)
5. **Rollback plan**: Keep old implementation available as fallback

## 9. Documentation Updates

- [ ] Update module READMEs
- [ ] Create event flow diagrams
- [ ] Document all event classes
- [ ] Update API documentation
- [ ] Create examples for each event type

## 10. Benefits of Implementation

1. **Type safety**: Catch errors at development time rather than runtime
2. **Cleaner code**: More intuitive and maintainable event handling
3. **Better testability**: Easier to mock and test event objects
4. **Improved validation**: Structured validation for all events
5. **Enhanced error handling**: More detailed and useful error information
6. **Performance monitoring**: Track event metrics for optimization
7. **Extensibility**: Easier to add new event types and handlers
