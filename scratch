Steps to building the backtesting engine:
1) Start with ta.py, trading_rule.py and ga.py.
1.5) Use data.csv for our data source. We need to split this into testing and training data chunks.
1.6) Once we have our test and train data frames (pandas dfs), I think it'd be a good idea to centralize all time shifting right here to avoid having many shifts spread throughout the code, ptoentially introducing lookahead bias.
2) Implement basic backtester without using any optimization from ga.py.
3) Implement a basic strategy using only top n performing rules from trading_rule.py
4) Implement performance metrics (no visualizations, just print to console) and verify output.
5) If everything checks out (i.e, top n strategy is performing as expected), then work toward implementing ga.py.
6) Ensure easy toggling between running unweighted strategy vs weighted strategy. Make sure weights and additional optimizations are optional.
7) If we see improvement from ga weighting vs top n, that means it's working. If not, we need to debug.
8) Implement optional regime filtering. Simlar to before we will go one step at a time and make sure this works before continuing. We should definately see improvements from this. And we should be using the same code we trained the rules on (trainTradingRuleFeatures). I think it'd be an easy refactor of this function if 
Throughout the code we should be centralizing configs. I think in the future I'll want to pass cofnig.json files to the CLI, as the config stuff can really start to explode. But in general I'd like a clean CLI interface let's me --test --train (and combines these for --backtest by loading the params generated from --train). I should be able to load data with --data, and chose no weighted rules with --no-weights.
