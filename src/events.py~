from enum import Enum
from dataclasses import dataclass
from datetime import datetime
import queue
from typing import Dict, Any

class EventType(Enum):
    MARKET = 0
    SIGNAL = 1
    ORDER = 2
    FILL = 3

@dataclass
class Event:
    type: EventType
    timestamp: datetime = None
    
    def __post_init__(self):
        if self.timestamp is None:
            self.timestamp = datetime.now()

@dataclass
class MarketEvent(Event):
    symbol: str
    bar_data: Dict[str, Any]
    
    def __post_init__(self):
        super().__post_init__()
        self.type = EventType.MARKET

@dataclass
class SignalEvent(Event):
    symbol: str
    datetime: datetime
    signal_type: int  # 1: long, -1: short, 0: exit
    strength: float = 1.0
    strategy_id: str = None
    
    def __post_init__(self):
        super().__post_init__()
        self.type = EventType.SIGNAL

@dataclass
class OrderEvent(Event):
    symbol: str
    order_type: str  # 'MKT' or 'LMT'
    quantity: int
    direction: int  # 1: long, -1: short
    
    def __post_init__(self):
        super().__post_init__()
        self.type = EventType.ORDER

@dataclass
class FillEvent(Event):
    symbol: str
    quantity: int
    direction: int
    fill_price: float
    commission: float = 0.0
    
    def __post_init__(self):
        super().__post_init__()
        self.type = EventType.FILL

class EventQueue:
    def __init__(self):
        self._queue = queue.Queue()
    
    def put(self, event):
        self._queue.put(event)
    
    def get(self):
        return self._queue.get()
    
    def empty(self):
        return self._queue.empty()
