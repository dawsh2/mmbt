rules"""
Main module for the backtesting engine.
"""

import sys
import os
import time
from typing import Dict, List, Any

from config import Config, parse_args
from data import DataHandler
from strategy import StrategyFactory
from backtester import Backtester
import ga

def main():
    """Main entry point for the backtesting engine."""
    # Parse command line arguments
    args = parse_args()
    config = Config(args)
    
    print(f"Starting backtesting engine with configuration:")
    print(config)
    
    # Create data handler
    data_handler = DataHandler(config)
    
    # Create strategy
    strategy = StrategyFactory.create_strategy(config)
    
    # Create and run backtester
    backtester = Backtester(config, data_handler, strategy)
    
    # Start timer
    start_time = time.time()
    
    # Run backtest
    success = backtester.run(ga_module=ga)
    
    # End timer
    end_time = time.time()
    elapsed_time = end_time - start_time
    
    if success:
        print(f"\nBacktest completed successfully in {elapsed_time:.2f} seconds.")
        
        # Compare strategies if requested
        if args.train and args.test:
            # Create different strategy configurations for comparison
            strategies = []
            
            # Original strategy
            strategies.append(config)
            
            # Create a copy with different configuration
            if config.use_weights:
                # Add unweighted strategy
                unweighted_config = Config()
                unweighted_config.data_file = config.data_file
                unweighted_config.train_size = config.train_size
                unweighted_config.use_weights = False
                unweighted_config.train = True
                unweighted_config.test = True
                strategies.append(unweighted_config)
            
            if len(strategies) > 1:
                print("\nComparing strategies:")
                backtester.compare_strategies(strategies, ga_module=ga)
    else:
        print("\nBacktest failed.")
    
    return 0

if __name__ == "__main__":
    sys.exit(main())
