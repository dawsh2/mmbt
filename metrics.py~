"""
Performance metrics calculation for the backtesting engine.
"""

import numpy as np
import pandas as pd
from typing import Dict, List, Tuple

def calculate_returns(signals: pd.Series, returns: pd.Series) -> pd.Series:
    """Calculate strategy returns based on signals and asset returns.
    
    Args:
        signals: Series of signals (-1, 0, 1)
        returns: Series of log returns
        
    Returns:
        Series of strategy returns
    """
    return signals * returns

def calculate_metrics(strategy_returns: pd.Series) -> Dict[str, float]:
    """Calculate performance metrics for a strategy.
    
    Args:
        strategy_returns: Series of strategy returns
        
    Returns:
        Dictionary of performance metrics
    """
    # Convert log returns to simple returns
    simple_returns = np.exp(strategy_returns) - 1
    
    # Calculate metrics
    total_return = np.exp(strategy_returns.sum()) - 1
    annualized_return = np.exp(strategy_returns.mean() * 252) - 1
    annualized_volatility = strategy_returns.std() * np.sqrt(252)
    sharpe_ratio = annualized_return / annualized_volatility if annualized_volatility != 0 else 0
    
    # Calculate drawdowns
    cum_returns = (1 + simple_returns).cumprod()
    peak = cum_returns.expanding().max()
    drawdowns = (cum_returns / peak) - 1
    max_drawdown = drawdowns.min()
    
    # Calculate win rate
    win_rate = (strategy_returns > 0).sum() / len(strategy_returns)
    
    # Calculate profit factor
    winning_trades = strategy_returns[strategy_returns > 0].sum()
    losing_trades = abs(strategy_returns[strategy_returns < 0].sum())
    profit_factor = winning_trades / losing_trades if losing_trades != 0 else float('inf')
    
    # Calculate number of trades
    trades = (signals.diff() != 0).sum() / 2  # Each trade consists of entry and exit
    
    return {
        'total_return': total_return,
        'annualized_return': annualized_return,
        'annualized_volatility': annualized_volatility,
        'sharpe_ratio': sharpe_ratio,
        'max_drawdown': max_drawdown,
        'win_rate': win_rate,
        'profit_factor': profit_factor,
        'number_of_trades': trades
    }

def print_metrics(metrics: Dict[str, float], title: str = "Performance Metrics"):
    """Print performance metrics in a formatted way.
    
    Args:
        metrics: Dictionary of performance metrics
        title: Title to display
    """
    print(f"\n{title}")
    print("=" * len(title))
    print(f"Total Return: {metrics['total_return']:.2%}")
    print(f"Annualized Return: {metrics['annualized_return']:.2%}")
    print(f"Annualized Volatility: {metrics['annualized_volatility']:.2%}")
    print(f"Sharpe Ratio: {metrics['sharpe_ratio']:.2f}")
    print(f"Maximum Drawdown: {metrics['max_drawdown']:.2%}")
    print(f"Win Rate: {metrics['win_rate']:.2%}")
    print(f"Profit Factor: {metrics['profit_factor']:.2f}")
    print(f"Number of Trades: {int(metrics['number_of_trades'])}")

def compare_strategies(metrics_list: List[Dict[str, float]], names: List[str]):
    """Compare performance metrics for multiple strategies.
    
    Args:
        metrics_list: List of metrics dictionaries
        names: List of strategy names
    """
    print("\nStrategy Comparison")
    print("=" * 80)
    
    # Print headers
    header = "Metric"
    for name in names:
        header += f" | {name:>15}"
    print(header)
    print("-" * len(header))
    
    # Print metrics
    metrics_to_display = [
        ('total_return', 'Total Return', lambda x: f"{x:.2%}"),
        ('annualized_return', 'Ann. Return', lambda x: f"{x:.2%}"),
        ('annualized_volatility', 'Ann. Volatility', lambda x: f"{x:.2%}"),
        ('sharpe_ratio', 'Sharpe Ratio', lambda x: f"{x:.2f}"),
        ('max_drawdown', 'Max Drawdown', lambda x: f"{x:.2%}"),
        ('win_rate', 'Win Rate', lambda x: f"{x:.2%}"),
        ('profit_factor', 'Profit Factor', lambda x: f"{x:.2f}"),
        ('number_of_trades', 'Trades', lambda x: f"{int(x)}")
    ]
    
    for key, label, formatter in metrics_to_display:
        row = f"{label:<15}"
        for metrics in metrics_list:
            row += f" | {formatter(metrics[key]):>15}"
        print(row)
